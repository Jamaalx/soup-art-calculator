// backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  company   String
  cui       String?
  address   String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  categories       Category[]
  fixedCosts       FixedCost[]
  offers           Offer[]
}

model Category {
  id          String    @id @default(cuid())
  userId      String
  name        String    // "Ciorbe", "Feluri Principale", "Garnituri", "Deserturi", "Salate"
  displayName String    // "üç≤ Ciorbe", "üçñ Feluri Principale"
  emoji       String    @default("üì¶")
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products    Product[]
  
  @@unique([userId, name])
}

model Product {
  id          String   @id @default(cuid())
  categoryId  String
  name        String
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@index([categoryId])
}

model FixedCost {
  id          String   @id @default(cuid())
  userId      String
  name        String   // "Ambalaj", "Transport"
  cost        Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, name])
}

model Offer {
  id              String   @id @default(cuid())
  userId          String
  offerNumber     String   @unique
  
  // Client info
  clientCompany   String
  clientCUI       String
  clientAddress   String
  clientContact   String
  
  // Offer details
  offerType       String   // "daily" | "weekly"
  menuType        String   // "variations" | "fixed"
  pricePerMenu    Float
  validityDays    Int
  
  // Selected items (JSON)
  selectedItems   Json     // { ciorbe: [], feluri: [], garnituri: [], ... }
  
  // Financial
  avgCost         Float
  profitPerMenu   Float
  profitMargin    Float
  
  createdAt       DateTime @default(now())
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}